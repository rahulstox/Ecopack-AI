generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL") 
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String          @id @default(cuid())
  name           String?         // This is the name from Google
  username       String?         @unique // Add this line for the custom username
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  dailyLogs      DailyLog[]
  userChallenges UserChallenge[]
}
model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Our custom models for Ecopack AI
model DailyLog {
  id              String   @id @default(cuid())
  date            DateTime @db.Date
  userId          String
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  actions         Json
  carbonFootprint Float    @default(0)

  @@unique([userId, date])
}

model Challenge {
  id             String          @id @default(cuid())
  title          String
  description    String
  target         Float
  durationDays   Int
  users          UserChallenge[]
}

model UserChallenge {
  id          String    @id @default(cuid())
  userId      String
  challengeId String
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: Cascade)
  progress    Float     @default(0)
  completed   Boolean   @default(false)
  startDate   DateTime  @default(now())
}